#!/usr/bin/env python
"""
Script de test pour diagnostiquer les probl√®mes de Swagger
"""

import os
import sys
import django
from pathlib import Path

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'profilometre.settings')
django.setup()

from django.test import Client
from django.urls import reverse

def test_swagger_endpoints():
    """Test des endpoints Swagger"""
    client = Client()
    
    print("üîç Test des endpoints Swagger...")
    print("=" * 50)
    
    # Test 1: Endpoint schema
    try:
        response = client.get('/api/schema/')
        print(f"‚úÖ Schema endpoint: {response.status_code}")
        if response.status_code == 200:
            print(f"   Content-Type: {response.get('Content-Type', 'N/A')}")
            print(f"   Content length: {len(response.content)} bytes")
        else:
            print(f"   Erreur: {response.content.decode()[:200]}")
    except Exception as e:
        print(f"‚ùå Erreur schema endpoint: {e}")
    
    # Test 2: Endpoint Swagger UI
    try:
        response = client.get('/api/docs/')
        print(f"‚úÖ Swagger UI endpoint: {response.status_code}")
        if response.status_code == 200:
            print(f"   Content-Type: {response.get('Content-Type', 'N/A')}")
            print(f"   Content length: {len(response.content)} bytes")
        else:
            print(f"   Erreur: {response.content.decode()[:200]}")
    except Exception as e:
        print(f"‚ùå Erreur Swagger UI endpoint: {e}")
    
    # Test 3: Endpoint ReDoc
    try:
        response = client.get('/api/redoc/')
        print(f"‚úÖ ReDoc endpoint: {response.status_code}")
        if response.status_code == 200:
            print(f"   Content-Type: {response.get('Content-Type', 'N/A')}")
            print(f"   Content length: {len(response.content)} bytes")
        else:
            print(f"   Erreur: {response.content.decode()[:200]}")
    except Exception as e:
        print(f"‚ùå Erreur ReDoc endpoint: {e}")

def test_django_config():
    """Test de la configuration Django"""
    print("\nüîß Test de la configuration Django...")
    print("=" * 50)
    
    from django.conf import settings
    
    # V√©rifier les apps install√©es
    print(f"‚úÖ Apps install√©es: {len(settings.INSTALLED_APPS)}")
    if 'drf_spectacular' in settings.INSTALLED_APPS:
        print("   ‚úÖ drf_spectacular est install√©")
    else:
        print("   ‚ùå drf_spectacular n'est pas install√©")
    
    # V√©rifier la configuration DRF
    print(f"‚úÖ Configuration DRF: {settings.REST_FRAMEWORK.get('DEFAULT_SCHEMA_CLASS', 'Non configur√©')}")
    
    # V√©rifier la configuration Spectacular
    if hasattr(settings, 'SPECTACULAR_SETTINGS'):
        print(f"‚úÖ Configuration Spectacular: {len(settings.SPECTACULAR_SETTINGS)} param√®tres")
        print(f"   SERVE_INCLUDE_SCHEMA: {settings.SPECTACULAR_SETTINGS.get('SERVE_INCLUDE_SCHEMA', 'Non d√©fini')}")
    else:
        print("   ‚ùå SPECTACULAR_SETTINGS non configur√©")

if __name__ == "__main__":
    print("üöÄ Diagnostic Swagger - Profilometre")
    print("=" * 50)
    
    test_django_config()
    test_swagger_endpoints()
    
    print("\nüìã R√©sum√©:")
    print("1. V√©rifiez que le serveur Django est d√©marr√©")
    print("2. Acc√©dez √† http://localhost:8000/api/docs/")
    print("3. Si probl√®me persiste, v√©rifiez la console du navigateur")
    print("4. V√©rifiez les logs Django pour les erreurs") 